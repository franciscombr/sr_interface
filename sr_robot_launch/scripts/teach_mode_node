#!/usr/bin/env python3

# Software License Agreement (BSD License)
# Copyright Â© 2019-2022 belongs to Shadow Robot Company Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#   1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#   3. Neither the name of Shadow Robot Company Ltd nor the names of its contributors
#      may be used to endorse or promote products derived from this software without
#      specific prior written permission.
#
# This software is provided by Shadow Robot Company Ltd "as is" and any express
# or implied warranties, including, but not limited to, the implied warranties of
# merchantability and fitness for a particular purpose are disclaimed. In no event
# shall the copyright holder be liable for any direct, indirect, incidental, special,
# exemplary, or consequential damages (including, but not limited to, procurement of
# substitute goods or services; loss of use, data, or profits; or business interruption)
# however caused and on any theory of liability, whether in contract, strict liability,
# or tort (including negligence or otherwise) arising in any way out of the use of this
# software, even if advised of the possibility of such damage.

from __future__ import absolute_import
from controller_manager_msgs.srv import (ListControllers, LoadController,
                                         SwitchController, SwitchControllerRequest)
import rospy
from sensor_msgs.msg import JointState
from sr_controllers_tools.sr_controller_helper import ControllerHelper
from sr_robot_msgs.msg import ControlType
from sr_robot_msgs.srv import (ChangeControlType, RobotTeachMode,
                               RobotTeachModeRequest, RobotTeachModeResponse, SetTeachMode)


class TeachModeManager(object):

    def __init__(self):
        hand_joint_names = self._create_hand_joints()

        rospy.Service('teach_mode', RobotTeachMode, self.teach_mode)

        # ARM REMOVED BECAUSE CANNOT CHANGE CONTROL
        self.ctrl_helpers = {
            "right_hand": ControllerHelper(["rh"], ["rh_"], hand_joint_names["rh_"]),
            "left_hand": ControllerHelper(["lh"], ["lh_"], hand_joint_names["lh_"])
        }

        self.modes = ["TRAJECTORY_MODE", "TEACH_MODE", "POSITION_MODE", "DIRECT_PWM_MODE"]

    def _create_hand_joints(self):
        hand_joint_names = {
            "rh_": [],
            "lh_": []
        }
        try:
            joint_states_msg = rospy.wait_for_message("/joint_states", JointState, timeout=10)
            for prefix in hand_joint_names.keys():
                for joint in joint_states_msg.name:
                    if prefix in joint:
                        if "_THJ" not in joint and "_WRJ" not in joint:
                            if "J1" in joint:
                                hand_joint_names[prefix].append(joint[len(prefix):-1].lower() + "0")
                            elif "J2" not in joint:
                                hand_joint_names[prefix].append(joint[len(prefix):].lower())
                        else:
                            hand_joint_names[prefix].append(joint[len(prefix):].lower())
        except Exception as error:
            rospy.logerr(f"{error}")
            raise Exception(f"{error}")

        if not any(hand_joint_names.values()):
            raise ValueError("No joint states have been found for a hand. " +
                             "Please check the connections.")

        return hand_joint_names

    def teach_mode(self, req):
        rospy.loginfo(
                    "Changing {} to {}".format(req.robot, self.modes[req.teach_mode]))

        if req.robot == "right_arm" or req.robot == "left_arm":
            if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE \
                    or req.teach_mode == RobotTeachModeRequest.POSITION_MODE:

                rospy.loginfo(
                    "Changing %s to position (non-teach) mode", req.robot)

                if not self.ctrl_helpers[req.robot].change_arm_teach_mode(False):
                    rospy.logerr("Could not set %s teach mode", req.robot)
                    return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

                if req.teach_mode == RobotTeachModeRequest.POSITION_MODE:
                    rospy.loginfo(
                        "Changing %s trajectory controllers to STOP", req.robot)
                    self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                rospy.loginfo(
                    "Changing %s trajectory controllers to RUN", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("run")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            elif req.teach_mode == RobotTeachModeRequest.TEACH_MODE:
                rospy.loginfo("Changing %s to teach mode", req.robot)

                if not self.ctrl_helpers[req.robot].change_arm_teach_mode(True):
                    rospy.logerr("Could not set %s teach mode", req.robot)
                    return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

                rospy.loginfo(
                    "Changing %s trajectory controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")
                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            else:
                rospy.logerr("Unknown teach mode: %u", req.teach_mode)
                return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)

        elif req.robot == "right_hand" or req.robot == "left_hand":
            change_type_msg = ChangeControlType()
            if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE \
                    or req.teach_mode == RobotTeachModeRequest.POSITION_MODE \
                    or req.teach_mode == RobotTeachModeRequest.DIRECT_PWM_MODE:

                rospy.loginfo("Changing all %s controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("stop")
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")

                change_type_msg.control_type = ControlType.PWM
                rospy.loginfo("Changing %s Control mode to PWM", req.robot)
                self.ctrl_helpers[
                    req.robot].change_force_ctrl_type(change_type_msg)

                if req.teach_mode == RobotTeachModeRequest.DIRECT_PWM_MODE:
                    self.ctrl_helpers[
                        req.robot].change_force_ctrl_type(change_type_msg)
                    rospy.loginfo("Changing %s controllers to effort", req.robot)
                    self.ctrl_helpers[req.robot].change_hand_ctrl("effort")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                if req.teach_mode == RobotTeachModeRequest.POSITION_MODE:
                    rospy.loginfo(
                        "Changing %s controllers to position", req.robot)
                    self.ctrl_helpers[req.robot].change_hand_ctrl("position")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

                if req.teach_mode == RobotTeachModeRequest.TRAJECTORY_MODE:
                    rospy.loginfo(
                        "Changing %s controllers to position", req.robot)
                    self.ctrl_helpers[req.robot].change_hand_ctrl("position")
                    rospy.loginfo(
                        "Changing %s trajectory controllers to RUN", req.robot)
                    self.ctrl_helpers[req.robot].change_trajectory_ctrl("run")
                    return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)

            elif req.teach_mode == RobotTeachModeRequest.TEACH_MODE:

                rospy.loginfo("Changing all %s controllers to STOP", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("stop")
                self.ctrl_helpers[req.robot].change_trajectory_ctrl("stop")

                change_type_msg.control_type = ControlType.FORCE
                rospy.loginfo("Changing %s Control mode to FORCE", req.robot)
                self.ctrl_helpers[
                    req.robot].change_force_ctrl_type(change_type_msg)
                rospy.loginfo("Changing %s controllers to effort", req.robot)
                self.ctrl_helpers[req.robot].change_hand_ctrl("effort")

                return RobotTeachModeResponse(RobotTeachModeResponse.SUCCESS)
            else:
                rospy.logerr("Unknown mode: {}".format(self.modes[req.teach_mode]))
                return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)
        else:
            rospy.logerr("Unknown robot: %s", req.robot)
            return RobotTeachModeResponse(RobotTeachModeResponse.ERROR)


if __name__ == "__main__":
    rospy.init_node("teach_mode_node")

    manager = TeachModeManager()

    rospy.spin()
